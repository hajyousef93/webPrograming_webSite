@model List<BIKECOWEBSITE.Models.OrdersDetail>

@{
    ViewBag.Title = "Index";
}


@{
    ViewBag.Title = "Invoice";
}

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
@Styles.Render("~/Content/css")


@using BIKECOWEBSITE.Controllers
@{ double sum = 0;
    var solditem = new List<string>();
    var cat = new List<string>();
    var qty = new List<int>();
    var price = new List<double>();
    int a = 0;

}

<div class="form-horizontal">
    <h4>Invoice Details</h4>
    <br />
    Invoice Number: @ViewBag.ID
    <br />

    Invoice Date: @DateTime.Now
    <br />

    Transaction number: SO @ViewBag.NO
    <br />
    <hr />
    <table style="text-align:center; table-layout:fixed; width:100%; font-size:16px">
        <tr>
            <th style="border:1px solid gray; text-align:center; background-color:lightgray" colspan="3">Product Name</th>
            <th style="border:1px solid gray; text-align:center; background-color:lightgray" colspan="3">Category Name</th>
            <th style="border:1px solid gray;text-align:center; background-color:lightgray">Price</th>
            <th style="border:1px solid gray;text-align:center; background-color:lightgray">Quantity</th>
            <th style="border:1px solid gray;text-align:center; background-color:lightgray">Sub Total</th>
        </tr>
        <tr>
            <th class="b"></th>
        </tr>
        @if (Session["cart"] != null)
        {
            foreach (Item item in (List<Item>)Session["cart"])
            {
                double suumm = 0;
                if (item.Product.SellPrice.HasValue)
                {
                    suumm = item.Product.SellPrice.Value;
                    price.Add(item.Product.SellPrice.Value);
                }
                sum += (suumm * item.Quantity);
                <tr>
                    <td colspan="3">@item.Product.Product1</td>
                    <td colspan="3">@item.Product.Category</td>
                    <td>@item.Product.SellPrice$</td>
                    <td>@item.Quantity</td>
                    <td>@(item.Product.SellPrice * item.Quantity)$</td>
                </tr>
                solditem.Add(item.Product.Product1);
                cat.Add(item.Product.Category);
                qty.Add(item.Quantity);
            }
        }
    </table>
    <br />
    <h4>Invoice Total: @sum$</h4>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Issue Invoice" onclick="Index1()" class="w3-black w3-round" />
                <p>
                    <br/>
                    Disclaimer: once you issue the invoice, you can't go back to edit your order.
                </p>
                <p>
                    Please proceed to rate our products.
                </p>
            </div>
        </div>

        for (int i = 0; i <= solditem.Count() - 1; i++)
        {

            for (int z = 0; z <= qty[i] - 1; z++)
            {

                <div class="form-group">
                    @Html.LabelFor(model => model[i].ID, htmlAttributes: new { @class = "control-label col-md-2", @Style = "Display:none" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model[i].ID, new { htmlAttributes = new { @class = "form-control", @Value = a + ViewBag.orderdeid, @readonly = "readonly", @Style = "Display:none" } })
                        @Html.ValidationMessageFor(model => model[i].ID, "", new { @class = "text-danger", @Style = "Display:none" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model[i].OrderNumber, "OrderNumber", htmlAttributes: new { @class = "control-label col-md-2", @Style = "Display:none" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model[i].OrderNumber, new { htmlAttributes = new { @class = "form-control", @Value = "SO" + ViewBag.NO, @readonly = "readonly", @Style = "Display:none" } })
                        @Html.ValidationMessageFor(model => model[i].OrderNumber, "", new { @class = "text-danger", @Style = "Display:none" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model[i].Category, "Category", htmlAttributes: new { @class = "control-label col-md-2", @Style = "Display:none" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model[i].Category, new { htmlAttributes = new { @class = "form-control", @Value = cat[i], @readonly = "readonly", @Style = "Display:none" } })
                        @Html.ValidationMessageFor(model => model[i].Category, "", new { @class = "text-danger", @Style = "Display:none" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model[i].Product, "Product", htmlAttributes: new { @class = "control-label col-md-2", @Style = "Display:none" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model[i].Product, new { htmlAttributes = new { @class = "form-control", @Value = solditem[i], @readonly = "readonly", @Style = "Display:none" } })
                        @Html.ValidationMessageFor(model => model[i].Product, "", new { @class = "text-danger", @Style = "Display:none" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model[i].ProductPrice, htmlAttributes: new { @class = "control-label col-md-2", @Style = "Display:none" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model[i].ProductPrice, new { htmlAttributes = new { @class = "form-control", @Value = price[i], @readonly = "readonly", @Style = "Display:none" } })
                        @Html.ValidationMessageFor(model => model[i].ProductPrice, "", new { @class = "text-danger", @Style = "Display:none" })
                    </div>
                </div>
                a = a + 1;
            }
            a = a + i;
        }

    }

</div>
    <div>
        @*@Html.ActionLink("Back to List", "Index")*@
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
    <script type="text/javascript">
        function preventBack() { window.history.forward(); }
        setTimeout("preventBack()", 0);
        window.onunload = function () { null };
    </script>